# Определение секции в которой будет содержатся
# код программы (инструкции, выполняемые процессором)
.text

# Метка, с которой начинается мсполнение программы
_start:

# Обьявление метки _start глобальной (видимой извне),
# для того чтобы загрузчик процесса, смог передавать в эту
# точку управления
.global		_start

# аргументы системного вызова write
# - 0: индентификатор write (=1)
# - 1: дескриптор устройства, куда будет выполнена запись (=1, stdout)
# - 2: указатель на строку, которую необходимо записать
# - 3: длинна строки


mov $1,		%rax
mov $1,		%rdi
mov $msg,	%rsi
mov $len,	%rdx
syscall 

# Вызов нашей функции exit.
call exit


# В ассамблере данные можно располагать где угодно, но если нам необходимо обратиться
# к ним по имени, то роль имени выполняет метка (в данном случае 'msg')
msg:
	.ascii "Hello, world\n"

# Вычисление длины строки: текущий_адрес (точка) минус начало строки (метка msg)

len = . - msg

# Системный вызов exit
exit:
	mov $60,	%rax
	mov $0,		%rdi
	syscall

